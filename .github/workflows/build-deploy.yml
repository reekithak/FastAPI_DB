name: Build and Deploy Code

on:
  push:
    branches:
      - "main"
      - "anotherbranch"
  pull_request:
    branches:
      - "test_branch"
jobs:
  build:
    environment:
      name: fastapi_testing
    env:
        DB_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
        DB_PORT: ${{secrets.DB_PORT}}
        DB_PASSWORD: ${{secrets.DB_PASSWORD}}
        DB_NAME: ${{secrets.DB_NAME}}
        USERNAME: ${{secrets.USERNAME}}
        SECRET_KEY: ${{secrets.SECRET_KEY}}
        ALGORITHM: ${{secrets.ALGORITHM}}
        ACCESS_TOKEN_EXPIRE_MINUTES: ${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}}
    services:
      postgres:
        image: postgres
        env:
            POSTGRES_PASSWORD: ${{secrets.DB_PASSWORD}}
            POSTGRES_DB: ${{secrets.DB_NAME}}_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ubuntu-latest
    steps:
      - name: pulling git repo
        uses: actions/checkout@v2
      - name:  Install Python v3.9
        uses:  actions/setup-python@v2
        with:
          python-version: "3.9"
      - name: update pip
        run: python -m pip install --upgrade pip
      - name:  Installing packages
        run: pip install -r requirements.txt
      - name: Testing with pytest
        run: |
          pip install pytest
          pytest -v -s
  deploy:
    runs-on: ubuntu-latest
    needs: [ build ]
    environment:
      name: production
    steps:
      - name: pulling git repo
        uses: actions/checkout@v2
      - name: deploying to Heroku
        uses: akhileshns/heroku-deploy@v3.12.12 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: ${{secrets.HEROKU_APP_NAME}}
          heroku_email: ${{secrets.HEROKU_EMAIL}}

#      - name: deploy to ubuntu server
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{secrets.PROD_HOST}}
#          username: ${{secrets.PROD_USERNAME}}
#          password: ${{secrets.PROD_PASSWORD}}
#          script: |
#            cd app/src
#            git pull
#            echo ${{secrets.PROD_PASSWORD}} | sudo -S systemctl restart api
#




# Production env CD setup

#
#      - name: Log in to the Container registry
#        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
#        with:
#          username: ${{ secrets.DOCKER_HUB_USERNAME }}
#          password: ${{ secrets.DOCKER_HUB_SECRET }}
#      - name: Set up Docker Buildx
#        id: buildx
#        uses: docker/setup-buildx-action@v1
#
#      - name: Build and push
#        id: docker_build
#        uses: docker/build-push-action@v2
#        with:
#         context: ./
#         file: ./Dockerfile
#         builder: ${{ steps.buildx.outputs.name }}
#         push: true
#         tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fastapi:latest
#         cache-from: type=local,src=/tmp/.buildx-cache
#         cache-to: type=local,dest=/tmp/.buildx-cache
#      - name: Image digest
#        run: echo ${{ steps.docker_build.outputs.digest }}

